// Code generated by go-swagger; DO NOT EDIT.

package car

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FindAllCarsHandlerFunc turns a function with the right signature into a find all cars handler
type FindAllCarsHandlerFunc func(FindAllCarsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindAllCarsHandlerFunc) Handle(params FindAllCarsParams) middleware.Responder {
	return fn(params)
}

// FindAllCarsHandler interface for that can handle valid find all cars params
type FindAllCarsHandler interface {
	Handle(FindAllCarsParams) middleware.Responder
}

// NewFindAllCars creates a new http.Handler for the find all cars operation
func NewFindAllCars(ctx *middleware.Context, handler FindAllCarsHandler) *FindAllCars {
	return &FindAllCars{Context: ctx, Handler: handler}
}

/* FindAllCars swagger:route GET /cars car findAllCars

FindAllCars find all cars API

*/
type FindAllCars struct {
	Context *middleware.Context
	Handler FindAllCarsHandler
}

func (o *FindAllCars) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFindAllCarsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
